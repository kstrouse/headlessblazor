@implements IDisposable

<HtmlElement TagName="@TagName" 
             @attributes="AdditionalAttributes"
             PreventDefaultOn="@(new[] { IsDisabled ? "onclick" : "", "onfocus" })"
             @onclick="HandleClick"
             @onfocus="HandleFocus"
             @onpointermove="HandlePointerMove"
             @onmouseout="HandlePointerLeave"
             role="menuitem"
             @ref="Container">
    @ChildContent(this)
</HtmlElement>

@code {
    private ElementReference testRef;

    [Parameter]
    public string TextValue { get; set; } = "";

    [Parameter]
    public string TagName { get; set; } = "a";

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public RenderFragment<MenuItem> ChildContent { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

    [CascadingParameter]
    public Menu Menu { get; set; }

    public HtmlElement Container { get; set; }


    public string Id => Container.Id;

    protected override void OnInitialized()
    {
        Menu.RegisterItem(this);
    }

    public void Dispose()
    {
        Menu.UnregisterItem(this);
    }

    public async Task HandleClick(MouseEventArgs e)
    {
        if (IsDisabled) return;
        Menu.CloseMenu();
        await Menu.SetButtonFocus();
    }

    public void HandleFocus(EventArgs e)
    {
        if (IsDisabled)
        {
            Menu.GoToItem(Focus.Nothing);
            return;
        }
        Menu.GoToItem(this);
    }

    public void HandlePointerMove(PointerEventArgs e)
    {
        if (IsDisabled) return;
        if (Menu.IsActiveItem(this)) return;
        Menu.GoToItem(this);
    }

    public void HandlePointerLeave(MouseEventArgs e)
    {
        if (IsDisabled) return;
        if (!Menu.IsActiveItem(this)) return;
        Menu.GoToItem(Focus.Nothing);
    }

}