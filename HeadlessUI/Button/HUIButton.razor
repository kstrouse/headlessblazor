@if (IsVisible)
{
    <HtmlElement TagName="@TagName"
                 @onclick="HandleClick"
                 @onkeyup="HandleKeyUp"
                 PreventDefaultOn="@(new string[] { "onkeyup" })"
                 @attributes="AdditionalAttributes"
                 role="button"
                 aria-label="@AriaLabel"
                 aria-disabled="@(!IsEnabled)"
                 disabled="@(!IsEnabled)">
        @ChildContent
    </HtmlElement>
}


@code {

    [Parameter] public bool IsEnabled { get; set; } = true;
    [Parameter] public bool IsVisible { get; set; } = true;

    [Parameter] public EventCallback<ComponentEventArgs<HUIButton, MouseEventArgs>> OnClick { get; set; }

    [Parameter] public string TagName { get; set; } = "button";
    [Parameter] public string AriaLabel { get; set; }

    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> AdditionalAttributes { get; set; }

    protected async Task HandleClick(MouseEventArgs e)
    {
        if (!IsEnabled || !IsVisible) return;

        await OnClick.InvokeAsync((this, e));
    }

    protected async Task HandleKeyUp(KeyboardEventArgs eventArgs)
    {
        if (!IsEnabled || !IsVisible) return;

        switch (eventArgs.Key)
        {
            case KeyboardKey.Space:
            case KeyboardKey.Enter:
                {
                    await OnClick.InvokeAsync((this, new MouseEventArgs()));
                    break;
                }
        }
    }
}
