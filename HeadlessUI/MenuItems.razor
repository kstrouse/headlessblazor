@inject IJSRuntime jsRuntime


<HtmlElement TagName="@TagName" @ref="rootElement" IsVisible="Menu.MenuState == MenuState.Open"
             @attributes="AdditionalAttributes"
             Id="@Id"
             PreventDefaultOn="@(new string[] { "onkeydown" })"
             OnElementReferenceSet="RegisterClickAway"
             aria-activedescendant="@Menu.ActiveItemId"
             aria-labelledby="@Menu.MenuButtonReference.Id"
             tabindex="0"
             role="menu">
    @ChildContent
</HtmlElement>

@code {
    [Parameter]
    public string TagName { get; set; } = "div";

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string Id { get; set; } = Guid.NewGuid().ToString("N");

    [Parameter]
    public Dictionary<string, object> AdditionalAttributes { get; set; }

    [CascadingParameter]
    public Menu Menu { get; set; }

    private HtmlElement rootElement;

    private bool isRegisterd = false;
    public ElementReference ElementReference => rootElement.ElementReference;

    protected override void OnInitialized()
    {
        Menu.MenuItemsReference = this;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (!isRegisterd && rootElement.IsVisible && ElementReference.Id != null)
        {
            isRegisterd = true;
            var objRef = DotNetObjectReference.Create(this);
            await Menu.JSMenu.InvokeVoidAsync("setItemsReference", ElementReference, objRef, nameof(HandleKeyDown));
        }
        else if (!rootElement.IsVisible)
        {
            isRegisterd = false;
        }
    }

    [JSInvokable]
    public async Task<string> HandleKeyDown(KeyboardEventArgs eventArgs)
    {
        Menu.ClearDebounceTimer();
        var key = eventArgs.Key;
        switch (key)
        {
            case KeyboardKeys.Enter:
            {
                Menu.CloseMenu();
                break;
            }
            case KeyboardKeys.ArrowDown:
            {
                Menu.GoToItem(Focus.NextItem);
                break;
            }
            case KeyboardKeys.ArrowUp:
            {
                Menu.GoToItem(Focus.PreviousItem);
                break;
            }
            case KeyboardKeys.Home:
            case KeyboardKeys.PageUp:
            {
                Menu.GoToItem(Focus.FirstItem);
                break;
            }
            case KeyboardKeys.End:
            case KeyboardKeys.PageDown:
            {
                Menu.GoToItem(Focus.FirstItem);
                break;
            }
            case KeyboardKeys.Escape:
            {
                Menu.CloseMenu();
                await Menu.SetButtonFocus();
                break;
            }
            case KeyboardKeys.Tab:
            {
                break;
            }
            default:
            {
                Menu.Search(key);
                if (key.Length > 1)
                {
                }
                break;
            }
        }

        return Menu.SearchQuery;
    }
}